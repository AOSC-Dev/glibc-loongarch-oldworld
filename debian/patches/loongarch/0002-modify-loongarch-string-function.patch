From ae62d2463304020e4f7ab2bb826afbbe752c4597 Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Sun, 24 Jan 2021 16:44:25 +0800
Subject: [PATCH 2/2] modify loongarch string function:    strchr strchrnul
 strcmp strncmp strnlen strlen

Change-Id: Idf6cc9c775ff99a49eee1f0318cfafb361d7fc47
---
 sysdeps/loongarch/lp64/strchr.S    |  62 +++++------
 sysdeps/loongarch/lp64/strchrnul.S |  54 +++++----
 sysdeps/loongarch/lp64/strcmp.S    |   2 +-
 sysdeps/loongarch/lp64/strlen.S    |  77 +++++++------
 sysdeps/loongarch/lp64/strncmp.S   |  15 ++-
 sysdeps/loongarch/lp64/strnlen.S   | 171 ++++++++++++++++-------------
 6 files changed, 205 insertions(+), 176 deletions(-)

diff --git a/sysdeps/loongarch/lp64/strchr.S b/sysdeps/loongarch/lp64/strchr.S
index 4652f05afd..105085b40f 100644
--- a/sysdeps/loongarch/lp64/strchr.S
+++ b/sysdeps/loongarch/lp64/strchr.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
@@ -61,9 +61,7 @@ LEAF(STRCHR)
 	ori		a2, a2, 0x101
 	andn		t4, a0, t4
 	slli.w		t1, t0, 3
-/*
-	ldr		t4, 0(a0)
-*/
+
 	ld.d		t4, t4, 0
 	
 	
@@ -71,16 +69,17 @@ LEAF(STRCHR)
 	bstrins.d	a1, a1, 31, 16
 	srl.d		t4, t4, t1
 
-    preld       0, a0, 32
 	bstrins.d	a1, a1, 63, 32
 	bstrins.d	a2, a2, 63, 32
 	srl.d		a7, t8, t1
 
+	li		t1, 8
 	nor		t8, a7, zero
 	slli.d		a3, a2, 7
 	or		t5, t8, t4
 	and		t3, a7, a1
 
+	sub.w		t1, t1, t0
 	nor		a3, a3, zero
 	xor		t2, t5, t3
 	sub.d		a7, t5, a2
@@ -88,22 +87,15 @@ LEAF(STRCHR)
 
 	sub.d		a5, t2, a2
 	nor		a4, t2, a3
-	and		a7, a7, a6
-	li		t1, 8
 
-	and		a5, a5, a4
-	move		a6, a7
-	/*
-	movn		a7, a5, a5
-	*/
-	MOVN2(a7,a5)
+    and         a6, a7, a6
+    and         a5, a5, a4
+    or          a7, a6, a5
 	bnez		a7, L(_mc8_a)
 
-	sub.w		t1, t1, t0
 	L_ADDU		a0, a0, t1
 L(_aloop):
 	ld.d		t4, a0, 0
-	L_ADDIU		a0, a0, 8
 
 	xor		t2, t4, a1
 	sub.d		a7, t4, a2
@@ -111,38 +103,34 @@ L(_aloop):
 	sub.d		a5, t2, a2
 
 	nor		a4, t2, a3
-	and		a7, a7, a6
-	and		a5, a5, a4
-	move		a6, a7
+    and         a6, a7, a6
+    and         a5, a5, a4
+    or          a7, a6, a5
+	bnez		a7, L(_mc8_a)
 
-	
-	#movn		a7, a5, a5
-	MOVN2(a7,a5)
+	ld.d		t4, a0, 8
+	L_ADDIU		a0, a0, 16
+	xor		t2, t4, a1
+	sub.d		a7, t4, a2
+	nor		a6, t4, a3
+	sub.d		a5, t2, a2
+
+	nor		a4, t2, a3
+    and         a6, a7, a6
+    and         a5, a5, a4
+    or          a7, a6, a5
 	beqz		a7, L(_aloop)
-	#nop
+
 	L_ADDIU		a0, a0, -8
 L(_mc8_a):
-	li		a4, 64
-	addi.d		t0, a5, -1
-	addi.d		t2, a6, -1
 
-	nor		t1, a5, zero
-	nor		t3, a6, zero
-	and		t0, t0, t1
-	and		t2, t2, t3
-
-	clz.d		t0, t0
-	clz.d		t2, t2
-	sub.w		t0, a4, t0
-	sub.w		t2, a4, t2
+    ctz.d       t0, a5
+    ctz.d       t2, a6
 
 	srli.w		t0, t0, 3
 	srli.w		t2, t2, 3
 	sltu		t1, t2, t0
 	L_ADDU		v0, a0, t0
-
-	#movn		t4, zero, t1
-	#MOVN(v0,zero,t1)
     masknez     v0, v0, t1
 	jr		ra
 END(STRCHR)
diff --git a/sysdeps/loongarch/lp64/strchrnul.S b/sysdeps/loongarch/lp64/strchrnul.S
index c933d05ee1..b58fedd6c7 100644
--- a/sysdeps/loongarch/lp64/strchrnul.S
+++ b/sysdeps/loongarch/lp64/strchrnul.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: Songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
@@ -90,24 +90,20 @@ LEAF(STRCHRNUL)
 	sub.d		a7, t5, a2
 	nor		a6, t5, a3
 
+	li		t1, 8
 	sub.d		a5, t2, a2
 	nor		a4, t2, a3
-	and		a7, a7, a6
-	li		t1, 8
 
+	and		a6, a7, a6
 	and		a5, a5, a4
-	move		a6, a7
-	/*
-	movn		a7, a5, a5
-	*/
-	MOVN2(a7,a5)
+	or          a7, a6, a5
 	bnez		a7, L(_mc8_a)
 
-	sub.w		t1, t1, t0
+	
+    sub.w		t1, t1, t0
 	L_ADDU		a0, a0, t1
 L(_aloop):
 	ld.d		t4, a0, 0
-	L_ADDIU		a0, a0, 8
 
 	xor		t2, t4, a1
 	sub.d		a7, t4, a2
@@ -115,35 +111,37 @@ L(_aloop):
 	sub.d		a5, t2, a2
 
 	nor		a4, t2, a3
-	and		a7, a7, a6
+	and		a6, a7, a6
 	and		a5, a5, a4
-	move		a6, a7
+	
+    or          a7, a6, a5
+	bnez		a7, L(_mc8_a)
+
+	ld.d		t4, a0, 8
+	L_ADDIU		a0, a0, 16
 
+	xor		    t2, t4, a1
+	sub.d		a7, t4, a2
+	nor		    a6, t4, a3
+	sub.d		a5, t2, a2
+
+	nor		    a4, t2, a3
+	and		    a6, a7, a6
+	and		    a5, a5, a4
 	
-	#movn		a7, a5, a5
-	MOVN2(a7,a5)
+    or          a7, a6, a5
 	beqz		a7, L(_aloop)
-	#nop
+
 	L_ADDIU		a0, a0, -8
 L(_mc8_a):
-	li		a4, 64
-	addi.d		t0, a5, -1
-	addi.d		t2, a6, -1
-
-	nor		t1, a5, zero
-	nor		t3, a6, zero
-	and		t0, t0, t1
-	and		t2, t2, t3
 
-	clz.d		t0, t0
-	clz.d		t2, t2
-	sub.w		t0, a4, t0
-	sub.w		t2, a4, t2
+    ctz.d       t0, a5
+    ctz.d       t2, a6
 
 	srli.w		t0, t0, 3
 	srli.w		t2, t2, 3
 	slt 		t1, t0, t2
-  //  movz        t0, t2, t1
+
     MOVZ(t0,t2,t1)
 
 	L_ADDU		v0, a0, t0
diff --git a/sysdeps/loongarch/lp64/strcmp.S b/sysdeps/loongarch/lp64/strcmp.S
index bcc01bcbf3..3d653e8412 100644
--- a/sysdeps/loongarch/lp64/strcmp.S
+++ b/sysdeps/loongarch/lp64/strcmp.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
diff --git a/sysdeps/loongarch/lp64/strlen.S b/sysdeps/loongarch/lp64/strlen.S
index 7c3a7a08d4..6075dd0068 100644
--- a/sysdeps/loongarch/lp64/strlen.S
+++ b/sysdeps/loongarch/lp64/strlen.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: Songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
@@ -40,12 +40,15 @@ algorithm:
 
 /* size_t strlen (const char *s1); */
 
-LEAF(STRLEN)
-
-	.align		4
-
-
-    preld       0, a0, 0
+	.text;
+    .globl	strlen;
+	.align		5;
+	cfi_startproc ;
+	.type	strlen, @function;
+strlen:
+    
+    //LEAF(strlen)
+    #preld       0, a0, 0
 
 	nor		t4, zero, zero
 	lu12i.w		a2, 0x01010
@@ -66,51 +69,61 @@ LEAF(STRLEN)
 	nor		t1, a1, zero
 	li		a4, 8
 
-    preld       0, a0, 32
+    #preld       0, a0, 32
 	bstrins.d	a2, a2, 63, 32
 	sub.d		a5, a4, t5
 	move		t5, a0
 
 	sub.d		t0, a1, a2
-	slli.d		a3, a2, 7
-	nor		a3, zero, a3
+	slli.d		t4, a2, 7
+	nor		a3, zero, t4
 	nor		t1, a1, a3
 
 	and		t0, t0, t1
-    preld       0, a0, 64
+    #preld       0, a0, 64
 	bnez		t0, strlen_count1	/* instead of use bnel with daddu a0, a0, a5 in branch slot */
 	L_ADDU		a0, a0, a5
-
 strlen_loop:
 	ld.d		a1, a0, 0
 	sub.d		t0, a1, a2
-	nor		t1, a1, a3
-	and		t0, t0, t1
-
-	L_ADDIU		a0, a0, 8
-	beqz		t0, strlen_loop
+    and         t1, t0, t4
+	bnez		t1, strlen_count_pre
+	ld.d		a1, a0, 8
+	sub.d		t0, a1, a2
+	and		    t1, t0, t4
+	L_ADDIU		a0, a0, 16
+	beqz		t1, strlen_loop
 strlen_count:
     addi.d      a0, a0, -8
+strlen_count_pre:
+    nor         t1, a1, a3
+    and         t0, t0, t1
+    beqz        t0, strlen_noascii_start
 strlen_count1:
-/*	if has d	ctz */
-/*	dctz		t1, t0 */
-/*
-	addi.d		t1, t0, -1
-	nor		t2, t0, zero
-
-	and		t1, t2, t1
-	li		t3, 64
-	clz.d		t1, t1
-
-	sub.w		t1, t3, t1
-*/	
-
 	ctz.d		t1, t0
-
 	L_SUBU		v0, a0, t5
 	srli.w		t1, t1, 3
 	L_ADDU		v0, v0, t1
-
+	jr		ra
+strlen_noascii_start:
+    addi.d      a0, a0, 8
+strlen_loop_noascii:
+	ld.d		a1, a0, 0
+	sub.d		t0, a1, a2
+	nor		t1, a1, a3
+	and		t0, t0, t1
+	bnez		t0, strlen_count1
+	ld.d		a1, a0, 8
+	sub.d		t0, a1, a2
+	nor		t1, a1, a3
+	and		t0, t0, t1
+	L_ADDIU		a0, a0, 16
+	beqz		t0, strlen_loop_noascii
+    addi.d      a0, a0, -8
+	ctz.d		t1, t0
+	L_SUBU		v0, a0, t5
+	srli.w		t1, t1, 3
+	L_ADDU		v0, v0, t1
 	jr		ra
 END(STRLEN)
 
diff --git a/sysdeps/loongarch/lp64/strncmp.S b/sysdeps/loongarch/lp64/strncmp.S
index ff085dd393..03b368db43 100644
--- a/sysdeps/loongarch/lp64/strncmp.S
+++ b/sysdeps/loongarch/lp64/strncmp.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
@@ -159,14 +159,23 @@ strncmp_misaligned8:
 strncmp_byte_loop:
     ld.bu       data1, src1, 0
     ld.bu       data2, src2, 0
-    addi.d      src1, src1, 1
-    addi.d      src2, src2, 1
+    addi.d      limit, limit, -1
+    xor         tmp1, data1, data2
+    masknez     tmp1, data1, tmp1
+    maskeqz     tmp1, limit, tmp1
+    beqz        tmp1, strncmp_done
+
+    ld.bu       data1, src1, 1
+    ld.bu       data2, src2, 1
+    addi.d      src1, src1, 2
+    addi.d      src2, src2, 2
     addi.d      limit, limit, -1
     xor         tmp1, data1, data2
     masknez     tmp1, data1, tmp1
     maskeqz     tmp1, limit, tmp1
     bnez        tmp1, strncmp_byte_loop
 
+
 strncmp_done:
     sub.d       result, data1, data2
     jr ra
diff --git a/sysdeps/loongarch/lp64/strnlen.S b/sysdeps/loongarch/lp64/strnlen.S
index 02c9dbb031..9232c03fbb 100644
--- a/sysdeps/loongarch/lp64/strnlen.S
+++ b/sysdeps/loongarch/lp64/strnlen.S
@@ -1,6 +1,6 @@
 /* Copyright 2016 Loongson Technology Corporation Limited  */
 
-/* Author: Huang Pei huangpei@loongson.cn */
+/* Author: Songyuekun songyuekun@loongson.cn */
 
 /*
  * ISA: MIPS64R2
@@ -39,91 +39,112 @@ algorithm:
     will destroy t6
 */
 
-#define CONDITIONSEL(rd,rc,ra,rb)\
-        masknez t6, rb, rc;\
+#define CONDITIONSEL(rd,ra,rb,rc)\
+        masknez a5, rb, rc;\
         maskeqz rd, ra, rc;\
-        or      rd, rd, t6
+        or      rd, rd, a5
 
 
+/* Parameters and Results */
+#define srcin	a0
+#define	limit   a1
+#define len 	v0
 
-/* size_t strnlen (const char *s1,size_t maxlen); */
 
-LEAF(STRNLEN)
+/* Internal variable */
+#define data1		t0
+#define	data2		t1
+#define	has_nul1	t2
+#define	has_nul2	t3
+#define src	        t4
+#define zeroones	t5
+#define	sevenf		t6
+#define data2a	    t7
+#define tmp6	    t7
+#define pos	        t8
+#define tmp1		a2
+#define	tmp2		a3
+#define	tmp3		a4
+#define tmp4        a5
+#define tmp5        a6
+#define limit_wd    a7
 
-	.align		4
 
 
-    beqz        a1, L(_out)
-	preld		0, a0, 0
-    move        t2, a1
-
-	nor		t4, zero, zero
-	lu12i.w		a2, 0x01010
-	andi		t5, a0, 0x7
-
-	li		t7, 0x7
-    li      t3, 8
-	slli.d		t6, t5, 0x3
-	andn		t7, a0, t7
-	ld.d		a1, t7, 0
-	sub.d		t7, zero, t6
-	sll.d		t4, t4, t7
-    maskeqz     t4, t4, t6
-	srl.d		a1, a1, t6
-	or		a1, a1, t4
-
-
-	ori		a2, a2, 0x101
-	nor		t1, a1, zero
-	li		a4, 8
-
-    preld       0, a0, 32
-	bstrins.d	a2, a2, 63, 32
-	sub.d		a5, a4, t5
-    sub.d       t3, t3, t5
-	move		t5, a0
-
-	sub.d		t0, a1, a2
-	slli.d		a3, a2, 7
-    sltu        t6, t3, t2
-	nor		a3, zero, a3
-	nor		t1, a1, a3
-    
-    xori        t6, t6, 0x1
+/* size_t strnlen (const char *s1,size_t maxlen); */
 
-	and		t0, t0, t1
-    or          t6, t6, t0
-    preld       0, a0, 64
-	bnez		t6, L(_count1)	/* instead of use bnel with daddu a0, a0, a5 in branch slot */
-	L_ADDU		a0, a0, a5
+LEAF(STRNLEN)
 
+	.align		4
+    beqz        limit, L(_hit_limit)
+    lu12i.w     zeroones, 0x01010
+    lu12i.w     sevenf, 0x7f7f7
+    ori         zeroones, zeroones, 0x101
+    ori         sevenf, sevenf, 0xf7f
+    bstrins.d   zeroones, zeroones, 63, 32
+    bstrins.d   sevenf, sevenf, 63, 32
+    andi        tmp1, srcin, 15
+    sub.d       src, srcin, tmp1
+    bnez        tmp1, L(misaligned)
+    addi.d      limit_wd, limit, -1
+    srli.d      limit_wd, limit_wd, 4
 L(_loop):
-	ld.d		a1, a0, 0
-	L_ADDIU		a0, a0, 8
-	sub.d		t0, a1, a2
-    sub.d       t3, a0, t5
-	nor		t1, a1, a3
-    sltu        t6, t3, t2
-	and		t0, t0, t1
-
-    xori        t6, t6, 0x1
-    or          t6, t6, t0
-	beqz		t6, L(_loop)
-L(_count):
-    addi.d      a0, a0, -8
-L(_count1):
-
-	ctz.d		t1, t0
-
-	L_SUBU		v0, a0, t5
-	srli.w		t1, t1, 3
-	L_ADDU		v0, v0, t1
-    sltu        t7, t2, v0
-    CONDITIONSEL(v0,t7,t2,v0)
-	jr		ra
-L(_out):
-    move v0, zero
-    jr  ra
+    ld.d        data1, src, 0
+    ld.d        data2, src, 8
+    addi.d      src, src, 16
+L(_realigned):
+    sub.d       tmp1, data1, zeroones
+    or          tmp2, data1, sevenf
+    sub.d       tmp3, data2, zeroones
+    or          tmp4, data2, sevenf
+    andn        has_nul1, tmp1, tmp2
+    andn        has_nul2, tmp3, tmp4
+    addi.d      limit_wd, limit_wd, -1
+    srli.d      tmp1, limit_wd, 63
+    or          tmp2, has_nul1, has_nul2
+    or          tmp3, tmp1, tmp2
+    beqz        tmp3, L(_loop)
+    beqz        tmp2, L(_hit_limit)
+    sub.d       len, src, srcin
+    beqz        has_nul1, L(_nul_in_data2)
+    move        has_nul2, has_nul1
+    addi.d      len, len, -8
+L(_nul_in_data2):
+    ctz.d       pos, has_nul2
+    srli.d      pos, pos, 3
+    addi.d      len, len, -8
+    add.d       len, len, pos
+    sltu        tmp1, len, limit
+    CONDITIONSEL(len,len,limit,tmp1)
+    jr ra
+
+    
+L(misaligned):
+    addi.d      limit_wd, limit, -1
+    sub.d       tmp4, zero, tmp1
+    andi        tmp3, limit_wd, 15
+    srli.d      limit_wd, limit_wd, 4
+    dli         tmp5, -1
+    ld.d        data1, src, 0
+    ld.d        data2, src, 8
+    addi.d      src, src, 16
+    slli.d      tmp4, tmp4, 3
+    add.d       tmp3, tmp3, tmp1
+    srl.d       tmp2, tmp5, tmp4
+    srli.d      tmp3, tmp3, 4
+    add.d       limit_wd, limit_wd, tmp3
+    or          data1, data1, tmp2
+    or          data2a, data2, tmp2
+    li          tmp3, 9
+    sltu        tmp1, tmp1, tmp3
+    CONDITIONSEL(data1,data1,tmp5,tmp1)
+    CONDITIONSEL(data2,data2,data2a,tmp1)
+    b           L(_realigned)
+
+
+L(_hit_limit):
+    move len, limit
+    jr  ra 
 END(STRNLEN)
 #ifndef ANDROID_CHANGES
 #ifdef _LIBC
-- 
2.20.1

