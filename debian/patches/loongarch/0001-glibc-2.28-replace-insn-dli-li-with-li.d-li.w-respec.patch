From 8b0a2fa8312cad636060cf04fbb3d3d29a26322f Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Mon, 2 Aug 2021 15:36:27 +0800
Subject: [PATCH] glibc-2.28: replace insn dli/li with li.d/li.w respectively.

        * sysdeps/loongarch/lp64/memcpy.S: Replace dli/li with
          li.d/li.w.
        * sysdeps/loongarch/lp64/s_cosf.S: Likewise.
        * sysdeps/loongarch/lp64/s_sinf.S: Likewise.
        * sysdeps/loongarch/lp64/strchr.S: Likewise.
        * sysdeps/loongarch/lp64/strchrnul.S: Likewise.
        * sysdeps/loongarch/lp64/strcpy.S: Likewise.
        * sysdeps/loongarch/lp64/strlen.S: Likewise.
        * sysdeps/loongarch/lp64/strncmp.S: Likewise.
        * sysdeps/loongarch/lp64/strnlen.S: Likewise.
        * sysdeps/loongarch/setjmp.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/clone.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/getcontext.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/setcontext.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/swapcontext.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/sysdep.S: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/sysdep.h: Likewise.
        * sysdeps/unix/sysv/linux/loongarch/vfork.S: Likewise.

Change-Id: I5e3155747bacbf19568a8a3497ef12dae4d4045e
---
 sysdeps/loongarch/lp64/memcpy.S               |  2 +-
 sysdeps/loongarch/lp64/s_cosf.S               | 20 +++++++++----------
 sysdeps/loongarch/lp64/s_sinf.S               | 20 +++++++++----------
 sysdeps/loongarch/lp64/strchr.S               |  4 ++--
 sysdeps/loongarch/lp64/strchrnul.S            |  4 ++--
 sysdeps/loongarch/lp64/strcpy.S               |  8 ++++----
 sysdeps/loongarch/lp64/strlen.S               |  4 ++--
 sysdeps/loongarch/lp64/strncmp.S              |  8 ++++----
 sysdeps/loongarch/lp64/strnlen.S              |  4 ++--
 sysdeps/loongarch/setjmp.S                    |  6 +++---
 sysdeps/unix/sysv/linux/loongarch/clone.S     |  6 +++---
 .../unix/sysv/linux/loongarch/getcontext.S    |  6 +++---
 .../unix/sysv/linux/loongarch/setcontext.S    |  8 ++++----
 .../unix/sysv/linux/loongarch/swapcontext.S   |  6 +++---
 sysdeps/unix/sysv/linux/loongarch/sysdep.S    |  4 ++--
 sysdeps/unix/sysv/linux/loongarch/sysdep.h    | 10 +++++-----
 sysdeps/unix/sysv/linux/loongarch/vfork.S     |  4 ++--
 17 files changed, 62 insertions(+), 62 deletions(-)

diff --git a/sysdeps/loongarch/lp64/memcpy.S b/sysdeps/loongarch/lp64/memcpy.S
index 25049320e6..2dc7a779db 100644
--- a/sysdeps/loongarch/lp64/memcpy.S
+++ b/sysdeps/loongarch/lp64/memcpy.S
@@ -206,7 +206,7 @@ less_1bytes:
 	jr	ra
 
 more_137bytes:
-	li       a6, 64
+	li.w       a6, 64
 	andi     t1, a0, 7
 	srli.d	a0, a0, 3
 	andi     t2, a2, 7
diff --git a/sysdeps/loongarch/lp64/s_cosf.S b/sysdeps/loongarch/lp64/s_cosf.S
index d67083e12d..5bfabefb0a 100644
--- a/sysdeps/loongarch/lp64/s_cosf.S
+++ b/sysdeps/loongarch/lp64/s_cosf.S
@@ -80,11 +80,11 @@ LEAF(COSF)
     /* fa0 is SP x; fa1 is DP x */
     movfr2gr.s  t0, fa0 /* Bits of x */
     fcvt.d.s    fa1, fa0 /* DP x */
-    li          t1, 0x7fffffff
+    li.w        t1, 0x7fffffff
     and         t0, t0, t1    /* |x| */
-    li          t1, 0x3f490fdb /* const Pi/4 */
+    li.w        t1, 0x3f490fdb /* const Pi/4 */
     bltu        t0, t1, L(arg_less_pio4) /* |x| < Pi/4 branch */
-    li          t1, 0x40e231d6 /* 9*Pi/4 */
+    li.w        t1, 0x40e231d6 /* 9*Pi/4 */
     la.local    t4, L(DP_) /*DP_ base addr*/
     bgeu        t0, t1, L(greater_or_equal_9pio4) /* |x| >= 9*Pi/4 branch */
 /* L(median_args): */    
@@ -144,10 +144,10 @@ L_return:
 
 L(greater_or_equal_9pio4):
     /* Here if |x|>=9*Pi/4 */
-    li          t1, 0x7f800000 /* x is Inf or NaN?  */
+    li.w        t1, 0x7f800000 /* x is Inf or NaN?  */
     bgeu        t0, t1, L(inf_or_nan) /* |x| >= Inf branch */
     /* Here if finite |x|>=9*Pi/4 */
-    li          t1, 0x4b000000 /* 2^23  */
+    li.w        t1, 0x4b000000 /* 2^23  */
     bgeu        t0, t1, L(greater_or_equal_2p23) /* |x| >= 2^23 branch */
     /* Here if 9*Pi/4<=|x|<2^23 */
     fabs.d      fa0, fa1 /* DP |x| */
@@ -173,7 +173,7 @@ L(greater_or_equal_2p23):
     addi.w      t0, t0, -124 /* t0 = bitpos */
     /* t3= j = bitpos/28 */
     /* x/28 = (x * ((0x100000000 / 28) + 1)) >> 32 */
-    li          t1, 0x924924a
+    li.w        t1, 0x924924a
     mulh.wu     t0, t1, t0
     fcvt.d.s    fa5, fa5 /* Convert to double */
     /* TODO: what is the best order ??? */
@@ -189,7 +189,7 @@ L(greater_or_equal_2p23):
     fmul.d      fa3, fa3, fa5 /* d = invpio4_table[j+3]*|x| */
 /*TODO: overflow check*/
     FTOL( t0, fa0, fa4 ) /*uint64_t l = a; TODO: change the order*/
-    li          t1, -8   /* 0xfffffffffffffff8 */
+    li.w        t1, -8   /* 0xfffffffffffffff8 */
     and         t0, t0, t1 /* l &= ~0x7; */
     LTOF( fa4, t0, fa4 ) /* DP l*/
     fsub.d      fa0, fa0, fa4 /* a -= l; */
@@ -228,7 +228,7 @@ L_leq_one:
 
 L(arg_less_pio4):
     /* Here if |x|<Pi/4 */
-    li          t1, 0x3d000000 /* const 2^-5 */
+    li.w        t1, 0x3d000000 /* const 2^-5 */
     blt         t0, t1, L(less_2pn5) /* |x| < 2^-5 branch */
     /* Here if 2^-5<=|x|<Pi/4 */
     /* 
@@ -270,7 +270,7 @@ L(arg_less_pio4):
 
 L(less_2pn5):
     /* Here if |x|<2^-5 */
-    li          t1, 0x32000000 /* 2^-27?  */
+    li.w        t1, 0x32000000 /* 2^-27?  */
     blt         t0, t1, L(less_2pn27)
     /* Here if 2^-27<=|x|<2^-5 */
     fmul.d      fa0, fa1, fa1 /* theta2=x^2 */
@@ -297,7 +297,7 @@ L(inf_or_nan):
     /* Here if |x| is Inf or NAN */
     bne         t0, t1, L_skip_errno_setting /* in case of x is NaN */
     la.tls.ie   t0, errno
-    li          t1, 0x21
+    li.w        t1, 0x21
     stx.w       t1, t0, tp
 L_skip_errno_setting:
     /* Here if |x| is Inf or NAN. Continued.  */
diff --git a/sysdeps/loongarch/lp64/s_sinf.S b/sysdeps/loongarch/lp64/s_sinf.S
index 0ebb2c907a..91c9db9e42 100644
--- a/sysdeps/loongarch/lp64/s_sinf.S
+++ b/sysdeps/loongarch/lp64/s_sinf.S
@@ -80,11 +80,11 @@ LEAF(SINF)
     /* fa0 is SP x; fa1 is DP x */
     movfr2gr.s  t2, fa0 /* Bits of x */
     fcvt.d.s    fa1, fa0 /* DP x */
-    li          t1, 0x7fffffff
+    li.w        t1, 0x7fffffff
     and         t0, t2, t1    /* |x| */
-    li          t1, 0x3f490fdb /* const Pi/4 */
+    li.w        t1, 0x3f490fdb /* const Pi/4 */
     bltu        t0, t1, L(arg_less_pio4) /* |x| < Pi/4 branch */
-    li          t1, 0x40e231d6 /* 9*Pi/4 */
+    li.w        t1, 0x40e231d6 /* 9*Pi/4 */
     la.local    t4, L(DP_) /*DP_ base addr*/
     bstrpick.d  t5, t2, 31, 31 /* sign of x */
     slli.w      t5, t5, 3
@@ -147,10 +147,10 @@ L_return:
 
 L(greater_or_equal_9pio4):
     /* Here if |x|>=9*Pi/4 */
-    li          t1, 0x7f800000 /* x is Inf or NaN?  */
+    li.w        t1, 0x7f800000 /* x is Inf or NaN?  */
     bgeu        t0, t1, L(inf_or_nan) /* |x| >= Inf branch */
     /* Here if finite |x|>=9*Pi/4 */
-    li          t1, 0x4b000000 /* 2^23  */
+    li.w        t1, 0x4b000000 /* 2^23  */
     bgeu        t0, t1, L(greater_or_equal_2p23) /* |x| >= 2^23 branch */
     /* Here if 9*Pi/4<=|x|<2^23 */
     fabs.d      fa0, fa1 /* DP |x| */
@@ -175,7 +175,7 @@ L(greater_or_equal_2p23):
     addi.w      t0, t0, -124 /* t0 = bitpos */
     /* t3= j = bitpos/28 */
     /* x/28 = (x * ((0x100000000 / 28) + 1)) >> 32 */
-    li          t1, 0x924924a
+    li.w        t1, 0x924924a
     mulh.wu     t0, t1, t0
     fcvt.d.s    fa5, fa5 /* Convert to double */
     /* TODO: what is the best order ??? */
@@ -191,7 +191,7 @@ L(greater_or_equal_2p23):
     fmul.d      fa3, fa3, fa5 /* d = invpio4_table[j+3]*|x| */
 /*TODO: overflow check*/
     FTOL( t0, fa0, fa4 ) /*uint64_t l = a; TODO: change the order*/
-    li          t1, -8   /* 0xfffffffffffffff8 */
+    li.w        t1, -8   /* 0xfffffffffffffff8 */
     and         t0, t0, t1 /* l &= ~0x7; */
     LTOF( fa4, t0, fa4 ) /* DP l*/
     fsub.d      fa0, fa0, fa4 /* a -= l; */
@@ -230,7 +230,7 @@ L_leq_one:
 
 L(arg_less_pio4):
     /* Here if |x|<Pi/4 */
-    li          t1, 0x3d000000 /* const 2^-5 */
+    li.w        t1, 0x3d000000 /* const 2^-5 */
     blt         t0, t1, L(less_2pn5) /* |x| < 2^-5 branch */
     /* Here if 2^-5<=|x|<Pi/4 */
     /* 
@@ -256,7 +256,7 @@ L(arg_less_pio4):
 
 L(less_2pn5):
     /* Here if |x|<2^-5 */
-    li          t1, 0x32000000 /* 2^-27?  */
+    li.w        t1, 0x32000000 /* 2^-27?  */
     blt         t0, t1, L(less_2pn27)
     /* Here if 2^-27<=|x|<2^-5 */
     fmul.d      fa0, fa1, fa1 /* theta2=x^2 */
@@ -285,7 +285,7 @@ L(inf_or_nan):
     /* Here if |x| is Inf or NAN */
     bne         t0, t1, L_skip_errno_setting /* in case of x is NaN */
     la.tls.ie   t0, errno
-    li          t1, 0x21
+    li.w        t1, 0x21
     stx.w       t1, t0, tp
 L_skip_errno_setting:
     /* Here if |x| is Inf or NAN. Continued.  */
diff --git a/sysdeps/loongarch/lp64/strchr.S b/sysdeps/loongarch/lp64/strchr.S
index a3bf46419c..872101db63 100644
--- a/sysdeps/loongarch/lp64/strchr.S
+++ b/sysdeps/loongarch/lp64/strchr.S
@@ -50,7 +50,7 @@
 LEAF(STRCHR)
 	.align		6
 
-	li		t4, 0x7
+	li.w		t4, 0x7
 	lu12i.w		a2, 0x01010
 	bstrins.d	a1, a1, 15, 8
 	andi		t0, a0, 0x7
@@ -70,7 +70,7 @@ LEAF(STRCHR)
 	bstrins.d	a2, a2, 63, 32
 	srl.d		a7, t8, t1
 
-	li		t1, 8
+	li.w		t1, 8
 	nor		t8, a7, zero
 	slli.d		a3, a2, 7
 	or		t5, t8, t4
diff --git a/sysdeps/loongarch/lp64/strchrnul.S b/sysdeps/loongarch/lp64/strchrnul.S
index dfa4788a85..a57a506576 100644
--- a/sysdeps/loongarch/lp64/strchrnul.S
+++ b/sysdeps/loongarch/lp64/strchrnul.S
@@ -57,7 +57,7 @@
 LEAF(STRCHRNUL)
 	.align		6
 
-	li		t4, 0x7
+	li.w		t4, 0x7
 	lu12i.w		a2, 0x01010
 	bstrins.d	a1, a1, 15, 8
 	andi		t0, a0, 0x7
@@ -90,7 +90,7 @@ LEAF(STRCHRNUL)
 	sub.d		a7, t5, a2
 	nor		a6, t5, a3
 
-	li		t1, 8
+	li.w		t1, 8
 	sub.d		a5, t2, a2
 	nor		a4, t2, a3
 
diff --git a/sysdeps/loongarch/lp64/strcpy.S b/sysdeps/loongarch/lp64/strcpy.S
index 2c30471e52..ce39e5a1a8 100644
--- a/sysdeps/loongarch/lp64/strcpy.S
+++ b/sysdeps/loongarch/lp64/strcpy.S
@@ -141,7 +141,7 @@ strcpy_mutual_align:
     use tmp2 to accelerate.
 */
 
-    li          tmp2, 0xff8
+    li.w          tmp2, 0xff8
     andi        tmp1, src,  0xff8
     beq         tmp1, tmp2, strcpy_page_cross
 
@@ -163,7 +163,7 @@ strcpy_mutual_align_finish:
     This will cause a duplicated paste for several bytes between the first double word and the second double word,
     but should not bring a problem.
 */
-    li          tmp1, 8
+    li.w          tmp1, 8
     st.d        data, dest, 0
     sub.d       tmp1, tmp1, src_off
     add.d       src,  src,  tmp1
@@ -188,10 +188,10 @@ strcpy_page_cross:
     -1 << (64 - src_off * 8) ->  ~(-1 >> (src_off * 8))
 
 */
-    li          tmp1, 0x7
+    li.w          tmp1, 0x7
     andn        tmp3, src,  tmp1
     ld.d        data, tmp3, 0
-    li          tmp4, -1
+    li.w          tmp4, -1
     slli.d      tmp2, src_off, 3
     srl.d       tmp4, tmp4, tmp2
     srl.d       data, data, tmp2
diff --git a/sysdeps/loongarch/lp64/strlen.S b/sysdeps/loongarch/lp64/strlen.S
index 74b01a103c..a34d8b6940 100644
--- a/sysdeps/loongarch/lp64/strlen.S
+++ b/sysdeps/loongarch/lp64/strlen.S
@@ -54,7 +54,7 @@ strlen:
 	lu12i.w		a2, 0x01010
 	andi		t5, a0, 0x7
 
-	li		t7, 0x7
+	li.w		t7, 0x7
 	slli.d		t6, t5, 0x3
 	andn		t7, a0, t7
 	ld.d		a1, t7, 0
@@ -67,7 +67,7 @@ strlen:
 
 	ori		a2, a2, 0x101
 	nor		t1, a1, zero
-	li		a4, 8
+	li.w		a4, 8
 
     #preld       0, a0, 32
 	bstrins.d	a2, a2, 63, 32
diff --git a/sysdeps/loongarch/lp64/strncmp.S b/sysdeps/loongarch/lp64/strncmp.S
index 365dcb2c31..29cc7b0234 100644
--- a/sysdeps/loongarch/lp64/strncmp.S
+++ b/sysdeps/loongarch/lp64/strncmp.S
@@ -106,10 +106,10 @@ strncmp_start_realigned:
     bge         limit_wd, zero, strncmp_not_limit
     /* if reach limit */
     andi        limit, limit, 0x7
-    li          tmp1, 0x8
+    li.w          tmp1, 0x8
     sub.d       limit, tmp1, limit
     slli.d      limit, limit, 0x3
-    dli         tmp1, -1
+    li.d        tmp1, -1
     srl.d       tmp1, tmp1, limit
     and         data1, data1, tmp1
     and         data2, data2, tmp1
@@ -154,7 +154,7 @@ strncmp_mutual_align:
 
 strncmp_misaligned8:
 
-    li          tmp1, 0x10
+    li.w          tmp1, 0x10
     bge         limit, tmp1, strncmp_try_words
 strncmp_byte_loop:
     ld.bu       data1, src1, 0
@@ -201,7 +201,7 @@ strncmp_page_end_loop:
     andi        tmp1, src1, 0x7
     bnez        tmp1, strncmp_page_end_loop
 strncmp_do_misaligned:
-    li          src1_off, 0x8
+    li.w          src1_off, 0x8
     addi.d      limit_wd, limit_wd, -1
     blt         limit_wd, zero, strncmp_done_loop
 
diff --git a/sysdeps/loongarch/lp64/strnlen.S b/sysdeps/loongarch/lp64/strnlen.S
index 6ee875f224..3a2046869b 100644
--- a/sysdeps/loongarch/lp64/strnlen.S
+++ b/sysdeps/loongarch/lp64/strnlen.S
@@ -124,7 +124,7 @@ L(misaligned):
     sub.d       tmp4, zero, tmp1
     andi        tmp3, limit_wd, 15
     srli.d      limit_wd, limit_wd, 4
-    dli         tmp5, -1
+    li.d        tmp5, -1
     ld.d        data1, src, 0
     ld.d        data2, src, 8
     addi.d      src, src, 16
@@ -135,7 +135,7 @@ L(misaligned):
     add.d       limit_wd, limit_wd, tmp3
     or          data1, data1, tmp2
     or          data2a, data2, tmp2
-    li          tmp3, 9
+    li.w          tmp3, 9
     sltu        tmp1, tmp1, tmp3
     CONDITIONSEL(data1,data1,tmp5,tmp1)
     CONDITIONSEL(data2,data2,data2a,tmp1)
diff --git a/sysdeps/loongarch/setjmp.S b/sysdeps/loongarch/setjmp.S
index fbea3827a9..da09a93c2a 100644
--- a/sysdeps/loongarch/setjmp.S
+++ b/sysdeps/loongarch/setjmp.S
@@ -20,11 +20,11 @@
 #include <sys/asm.h>
 
 ENTRY (_setjmp)
-  li a1,0
+  li.w a1,0
   b __sigsetjmp
 END (_setjmp)
 ENTRY (setjmp)
-  li a1,1
+  li.w a1,1
 END (setjmp)
 ENTRY (__sigsetjmp)
   REG_S ra, a0, 0*SZREG
@@ -51,7 +51,7 @@ ENTRY (__sigsetjmp)
   FREG_S $f31, a0, 13*SZREG + 7*SZFREG
 
 #if !IS_IN (libc) && IS_IN(rtld)
-  li v0, 0
+  li.w v0, 0
   jirl zero,ra,0
 #else
   b __sigjmp_save
diff --git a/sysdeps/unix/sysv/linux/loongarch/clone.S b/sysdeps/unix/sysv/linux/loongarch/clone.S
index 8d689ead44..b06f5e25b0 100644
--- a/sysdeps/unix/sysv/linux/loongarch/clone.S
+++ b/sysdeps/unix/sysv/linux/loongarch/clone.S
@@ -46,7 +46,7 @@ ENTRY (__clone)
 	or	a4, a5, zero
 
 	/* Do the system call.  */
-	dli	a7,__NR_clone
+	li.d	a7,__NR_clone
 	syscall	0
 
 	blt	a0, zero ,L (error)
@@ -56,7 +56,7 @@ ENTRY (__clone)
 	ret
 
 L (invalid):
-	dli	a0, -EINVAL
+	li.d	a0, -EINVAL
 	/* Something bad happened -- no child created.  */
 L (error):
 	b	__syscall_error
@@ -81,7 +81,7 @@ L (thread_start):
 	jirl	ra, a1, 0
 
 	/* Call exit with the function's return value.  */
-	dli	a7, __NR_exit
+	li.d	a7, __NR_exit
 	syscall	0
 
 	END (__thread_start)
diff --git a/sysdeps/unix/sysv/linux/loongarch/getcontext.S b/sysdeps/unix/sysv/linux/loongarch/getcontext.S
index 89f25f1216..9c28d95800 100644
--- a/sysdeps/unix/sysv/linux/loongarch/getcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/getcontext.S
@@ -54,12 +54,12 @@ LEAF (__getcontext)
 #endif /* __loongarch_soft_float */
 
 /* rt_sigprocmask (SIG_BLOCK, NULL, &ucp->uc_sigmask, _NSIG8) */
-	dli	a3, _NSIG8
+	li.d	a3, _NSIG8
 	addi.d     a2, a0, UCONTEXT_SIGMASK
 	ori	a1, zero,0
-	dli	a0, SIG_BLOCK
+	li.d	a0, SIG_BLOCK
 
-	dli	a7, SYS_ify (rt_sigprocmask)
+	li.d	a7, SYS_ify (rt_sigprocmask)
 	syscall 0
 	blt	a0, zero, 99f
 
diff --git a/sysdeps/unix/sysv/linux/loongarch/setcontext.S b/sysdeps/unix/sysv/linux/loongarch/setcontext.S
index bbe2f5b0c0..c96ec43c90 100644
--- a/sysdeps/unix/sysv/linux/loongarch/setcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/setcontext.S
@@ -33,12 +33,12 @@ LEAF (__setcontext)
 	addi.d	sp, sp, -16
 	st.d	a0, sp, 0	/* Save ucp to stack. */
 /* rt_sigprocmask (SIG_SETMASK, &ucp->uc_sigmask, NULL, _NSIG8) */
-	dli	a3, _NSIG8
-	dli	a2, 0
+	li.d	a3, _NSIG8
+	li.d	a2, 0
 	addi.d  a1, a0, UCONTEXT_SIGMASK
-	dli	a0, SIG_SETMASK
+	li.d	a0, SIG_SETMASK
 
-	dli	a7, SYS_ify (rt_sigprocmask)
+	li.d	a7, SYS_ify (rt_sigprocmask)
 	syscall 0
 
 	blt	a0, $r0, 99f
diff --git a/sysdeps/unix/sysv/linux/loongarch/swapcontext.S b/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
index 58bd16b20d..d839dd87db 100644
--- a/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
@@ -57,12 +57,12 @@ LEAF (__swapcontext)
 #endif /* __loongarch_soft_float */
 
 /* rt_sigprocmask (SIG_SETMASK, &ucp->uc_sigmask, &oucp->uc_sigmask, _NSIG8) */
-	dli	a3, _NSIG8
+	li.d	a3, _NSIG8
 	addi.d	a2, a0, UCONTEXT_SIGMASK
 	addi.d  a1, t0, UCONTEXT_SIGMASK
-	dli	a0, SIG_SETMASK
+	li.d	a0, SIG_SETMASK
 
-	dli	a7, SYS_ify (rt_sigprocmask)
+	li.d	a7, SYS_ify (rt_sigprocmask)
 	syscall 0
 
 	blt	a0, zero, 99f
diff --git a/sysdeps/unix/sysv/linux/loongarch/sysdep.S b/sysdeps/unix/sysv/linux/loongarch/sysdep.S
index 42b9fbb4ad..a809428340 100644
--- a/sysdeps/unix/sysv/linux/loongarch/sysdep.S
+++ b/sysdeps/unix/sysv/linux/loongarch/sysdep.S
@@ -32,7 +32,7 @@ ENTRY (__syscall_set_errno)
 	/* We got here because a0 < 0, but only codes in the range [-4095, -1]
 	  represent errors.  Otherwise, just return the result normally.  */
 
-	dli	t1, -4096
+	li.d	t1, -4096
 	bgeu	t1, a0, L (out)
 	sub.w	a0, zero, a0
 
@@ -46,7 +46,7 @@ ENTRY (__syscall_set_errno)
 	add.d	t1, tp, t1
 #endif
 	st.w	a0, t1, 0
-	dli	a0, -1
+	li.d	a0, -1
 L (out):
 	ret
 END (__syscall_set_errno)
diff --git a/sysdeps/unix/sysv/linux/loongarch/sysdep.h b/sysdeps/unix/sysv/linux/loongarch/sysdep.h
index 6e507d907f..f50946d4e3 100644
--- a/sysdeps/unix/sysv/linux/loongarch/sysdep.h
+++ b/sysdeps/unix/sysv/linux/loongarch/sysdep.h
@@ -15,9 +15,9 @@
 # undef PSEUDO
 # define PSEUDO(name, syscall_name, args)		\
 	ENTRY (name);					\
-	dli	a7, SYS_ify (syscall_name);		\
+	li.d	a7, SYS_ify (syscall_name);		\
 	syscall	0;					\
-	dli	a7, -4096;				\
+	li.d	a7, -4096;				\
 	bltu	a7, a0, .Lsyscall_error ## name;
 
 # undef PSEUDO_END
@@ -34,7 +34,7 @@
 	la	t0, rtld_errno;				\
 	sub.w	a0, zero, a0;				\
 	st.w	a0, t0, 0;				\
-	dli	a0, -1;
+	li.d	a0, -1;
 
 #  else
 
@@ -44,7 +44,7 @@
 	add.d	t0, tp, t0;				\
 	sub.w	a0, zero, a0;				\
 	st.w	a0, t0, 0;				\
-	dli	a0, -1;
+	li.d	a0, -1;
 
 #  endif
 # else
@@ -59,7 +59,7 @@
 # undef PSEUDO_NEORRNO
 # define PSEUDO_NOERRNO(name, syscall_name, args)	\
 	ENTRY (name);					\
-	dli	a7, SYS_ify (syscall_name);		\
+	li.d	a7, SYS_ify (syscall_name);		\
 	syscall	0;
 
 # undef PSEUDO_END_NOERRNO
diff --git a/sysdeps/unix/sysv/linux/loongarch/vfork.S b/sysdeps/unix/sysv/linux/loongarch/vfork.S
index 73c8e66683..83cf141fcc 100644
--- a/sysdeps/unix/sysv/linux/loongarch/vfork.S
+++ b/sysdeps/unix/sysv/linux/loongarch/vfork.S
@@ -28,11 +28,11 @@
 ENTRY (__vfork)
 
 
-    dli a0, 0x4111 /* CLONE_VM | CLONE_VFORK | SIGCHLD */
+    li.d a0, 0x4111 /* CLONE_VM | CLONE_VFORK | SIGCHLD */
     add.d a1, zero, sp
 
     /* Do the system call.  */
-    dli a7, __NR_clone
+    li.d a7, __NR_clone
     syscall 0
 
     blt a0, zero ,L (error)
-- 
2.20.1

