From c0236c1591a64cf9c6577284669aec9d96be6ebc Mon Sep 17 00:00:00 2001
From: Xiaotian Wu <wuxiaotian@loongson.cn>
Date: Mon, 22 Mar 2021 21:47:09 +0800
Subject: [PATCH] Fix argument passing for inlined syscalls on LoongArch

According to [gcc documentation][1], temporary variables must be used for
the desired content to not be call-clobbered.

Fix the Linux inline syscall templates by adding temporary variables,
much like what x86 did before
(commit 381a0c26d73e0f074c962e0ab53b99a6c327066d).

Tested with gcc 8.4.1, both cross-compiled and natively on Loongson 3A5000.

[1]: https://gcc.gnu.org/onlinedocs/gcc/Local-Register-Variables.html
---
 sysdeps/unix/sysv/linux/loongarch/sysdep.h | 84 ++++++++++++++--------
 1 file changed, 56 insertions(+), 28 deletions(-)

diff --git a/sysdeps/unix/sysv/linux/loongarch/sysdep.h b/sysdeps/unix/sysv/linux/loongarch/sysdep.h
index 06e7757d..6e507d90 100644
--- a/sysdeps/unix/sysv/linux/loongarch/sysdep.h
+++ b/sysdeps/unix/sysv/linux/loongarch/sysdep.h
@@ -153,8 +153,9 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -170,9 +171,11 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -188,10 +191,13 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
+	long int _arg2 = (long int) (arg2);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
-	register long int __a2 asm ("$a2") = (long int) (arg2);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
+	register long int __a2 asm ("$a2") = _arg2;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -207,11 +213,15 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
+	long int _arg2 = (long int) (arg2);				\
+	long int _arg3 = (long int) (arg3);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
-	register long int __a2 asm ("$a2") = (long int) (arg2);		\
-	register long int __a3 asm ("$a3") = (long int) (arg3);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
+	register long int __a2 asm ("$a2") = _arg2;			\
+	register long int __a3 asm ("$a3") = _arg3;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -227,12 +237,17 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
+	long int _arg2 = (long int) (arg2);				\
+	long int _arg3 = (long int) (arg3);				\
+	long int _arg4 = (long int) (arg4);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
-	register long int __a2 asm ("$a2") = (long int) (arg2);		\
-	register long int __a3 asm ("$a3") = (long int) (arg3);		\
-	register long int __a4 asm ("$a4") = (long int) (arg4);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
+	register long int __a2 asm ("$a2") = _arg2;			\
+	register long int __a3 asm ("$a3") = _arg3;			\
+	register long int __a4 asm ("$a4") = _arg4;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -248,13 +263,19 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
+	long int _arg2 = (long int) (arg2);				\
+	long int _arg3 = (long int) (arg3);				\
+	long int _arg4 = (long int) (arg4);				\
+	long int _arg5 = (long int) (arg5);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
-	register long int __a2 asm ("$a2") = (long int) (arg2);		\
-	register long int __a3 asm ("$a3") = (long int) (arg3);		\
-	register long int __a4 asm ("$a4") = (long int) (arg4);		\
-	register long int __a5 asm ("$a5") = (long int) (arg5);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
+	register long int __a2 asm ("$a2") = _arg2;			\
+	register long int __a3 asm ("$a3") = _arg3;			\
+	register long int __a4 asm ("$a4") = _arg4;			\
+	register long int __a5 asm ("$a5") = _arg5;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
@@ -271,14 +292,21 @@
 	long int _sys_result;						\
 									\
 	{								\
+	long int _arg0 = (long int) (arg0);				\
+	long int _arg1 = (long int) (arg1);				\
+	long int _arg2 = (long int) (arg2);				\
+	long int _arg3 = (long int) (arg3);				\
+	long int _arg4 = (long int) (arg4);				\
+	long int _arg5 = (long int) (arg5);				\
+	long int _arg6 = (long int) (arg6);				\
 	register long int __a7 asm ("$a7") = number;			\
-	register long int __a0 asm ("$a0") = (long int) (arg0);		\
-	register long int __a1 asm ("$a1") = (long int) (arg1);		\
-	register long int __a2 asm ("$a2") = (long int) (arg2);		\
-	register long int __a3 asm ("$a3") = (long int) (arg3);		\
-	register long int __a4 asm ("$a4") = (long int) (arg4);		\
-	register long int __a5 asm ("$a5") = (long int) (arg5);		\
-	register long int __a6 asm ("$a6") = (long int) (arg6);		\
+	register long int __a0 asm ("$a0") = _arg0;			\
+	register long int __a1 asm ("$a1") = _arg1;			\
+	register long int __a2 asm ("$a2") = _arg2;			\
+	register long int __a3 asm ("$a3") = _arg3;			\
+	register long int __a4 asm ("$a4") = _arg4;			\
+	register long int __a5 asm ("$a5") = _arg5;			\
+	register long int __a6 asm ("$a6") = _arg6;			\
 	__asm__ volatile ( 						\
 	"syscall	0\n\t" 						\
 	: "+r" (__a0)							\
-- 
2.31.0

